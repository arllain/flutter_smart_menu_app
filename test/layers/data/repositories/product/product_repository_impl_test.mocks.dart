// Mocks generated by Mockito 5.3.0 from annotations
// in smart_menu_app/test/layers/data/repositories/product/product_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:smart_menu_app/core/network/network_info.dart' as _i6;
import 'package:smart_menu_app/layers/data/datasources/product/local/product_local_datasource.dart'
    as _i2;
import 'package:smart_menu_app/layers/data/datasources/product/remote/product_remote_datasource.dart'
    as _i5;
import 'package:smart_menu_app/layers/data/models/product/product_model.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ProductLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductLocalDataSource extends _i1.Mock
    implements _i2.ProductLocalDataSource {
  MockProductLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.ProductModel>> getAllProducts() => (super.noSuchMethod(
          Invocation.method(#getAllProducts, []),
          returnValue:
              _i3.Future<List<_i4.ProductModel>>.value(<_i4.ProductModel>[]))
      as _i3.Future<List<_i4.ProductModel>>);
  @override
  _i3.Future<List<_i4.ProductModel>> getProductsByCategory(int? id) =>
      (super.noSuchMethod(Invocation.method(#getProductsByCategory, [id]),
          returnValue: _i3.Future<List<_i4.ProductModel>>.value(
              <_i4.ProductModel>[])) as _i3.Future<List<_i4.ProductModel>>);
  @override
  _i3.Future<void> cacheProductList(List<_i4.ProductModel>? productList) =>
      (super.noSuchMethod(Invocation.method(#cacheProductList, [productList]),
              returnValue: _i3.Future<void>.value(),
              returnValueForMissingStub: _i3.Future<void>.value())
          as _i3.Future<void>);
}

/// A class which mocks [ProductRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRemoteDataSource extends _i1.Mock
    implements _i5.ProductRemoteDataSource {
  MockProductRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.ProductModel>> getAllProducts() => (super.noSuchMethod(
          Invocation.method(#getAllProducts, []),
          returnValue:
              _i3.Future<List<_i4.ProductModel>>.value(<_i4.ProductModel>[]))
      as _i3.Future<List<_i4.ProductModel>>);
  @override
  _i3.Future<List<_i4.ProductModel>> getProductsByCategory(int? id) =>
      (super.noSuchMethod(Invocation.method(#getProductsByCategory, [id]),
          returnValue: _i3.Future<List<_i4.ProductModel>>.value(
              <_i4.ProductModel>[])) as _i3.Future<List<_i4.ProductModel>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i6.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: _i3.Future<bool>.value(false)) as _i3.Future<bool>);
}
